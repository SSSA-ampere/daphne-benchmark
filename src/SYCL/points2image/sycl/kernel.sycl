//==-------------------------------------------------------==//
//
// WARNING: This file is auto-generated. Do not modify.
//
// SYCL Device Compiler:
//   Codeplay ComputeCpp - CE 1.1.4 Device Compiler - clang version 6.0.0  (based on LLVM 6.0.0svn)
//
//==-------------------------------------------------------==//
#ifndef CODEPLAY_SYCL_kernel_cpp_STUB
#define CODEPLAY_SYCL_kernel_cpp_STUB

#include <SYCL/sycl_ih.hpp>

namespace cl {
namespace sycl {
namespace detail {
namespace {
// SYCL kernel traits primary template
template <typename T>
struct kernel_info;

 static_assert(1== COMPUTECPP_VERSION_MAJOR &&
1== COMPUTECPP_VERSION_MINOR &&
4== COMPUTECPP_VERSION_PATCH,"Error: Mismatch between compiler and runtime. Please ensure both are at the latest version. Compiler is version:1.1.4 Runtime: " __COMPUTECPP__ );

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
namespace cl {
namespace sycl {
namespace detail {
namespace {
unsigned char SYCL_kernel_cpp_bin_nvptx64[] = {
  0x2f, 0x2f, 0x0a, 0x2f, 0x2f, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
  0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x4c, 0x4c, 0x56, 0x4d, 0x20,
  0x4e, 0x56, 0x50, 0x54, 0x58, 0x20, 0x42, 0x61, 0x63, 0x6b, 0x2d, 0x45,
  0x6e, 0x64, 0x0a, 0x2f, 0x2f, 0x0a, 0x0a, 0x2e, 0x76, 0x65, 0x72, 0x73,
  0x69, 0x6f, 0x6e, 0x20, 0x33, 0x2e, 0x32, 0x0a, 0x2e, 0x74, 0x61, 0x72,
  0x67, 0x65, 0x74, 0x20, 0x73, 0x6d, 0x5f, 0x32, 0x30, 0x2c, 0x20, 0x74,
  0x65, 0x78, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70,
  0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x0a, 0x2e, 0x61, 0x64, 0x64, 0x72,
  0x65, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x36, 0x34, 0x0a,
  0x0a, 0x09, 0x2f, 0x2f, 0x20, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x6c, 0x09,
  0x53, 0x59, 0x43, 0x4c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70,
  0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20,
  0x2f, 0x2f, 0x20, 0x2d, 0x2d, 0x20, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x20,
  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x59, 0x43,
  0x4c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
  0x74, 0x73, 0x32, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x2f, 0x2f, 0x20, 0x40, 0x53, 0x59, 0x43, 0x4c, 0x5f, 0x63, 0x6c,
  0x61, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x69,
  0x6d, 0x61, 0x67, 0x65, 0x0a, 0x2e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x20,
  0x53, 0x59, 0x43, 0x4c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70,
  0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x28,
  0x0a, 0x09, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x20, 0x2e, 0x75, 0x36,
  0x34, 0x20, 0x2e, 0x70, 0x74, 0x72, 0x20, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
  0x61, 0x6c, 0x20, 0x2e, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x20, 0x34, 0x20,
  0x53, 0x59, 0x43, 0x4c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70,
  0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
  0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x30, 0x2c, 0x0a, 0x09, 0x2e, 0x70,
  0x61, 0x72, 0x61, 0x6d, 0x20, 0x2e, 0x75, 0x36, 0x34, 0x20, 0x2e, 0x70,
  0x74, 0x72, 0x20, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x2e,
  0x61, 0x6c, 0x69, 0x67, 0x6e, 0x20, 0x34, 0x20, 0x53, 0x59, 0x43, 0x4c,
  0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
  0x73, 0x32, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
  0x6d, 0x5f, 0x31, 0x2c, 0x0a, 0x09, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d,
  0x20, 0x2e, 0x75, 0x36, 0x34, 0x20, 0x2e, 0x70, 0x74, 0x72, 0x20, 0x2e,
  0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x2e, 0x61, 0x6c, 0x69, 0x67,
  0x6e, 0x20, 0x34, 0x20, 0x53, 0x59, 0x43, 0x4c, 0x5f, 0x63, 0x6c, 0x61,
  0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x69, 0x6d,
  0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x32, 0x2c,
  0x0a, 0x09, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x20, 0x2e, 0x75, 0x36,
  0x34, 0x20, 0x2e, 0x70, 0x74, 0x72, 0x20, 0x2e, 0x67, 0x6c, 0x6f, 0x62,
  0x61, 0x6c, 0x20, 0x2e, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x20, 0x34, 0x20,
  0x53, 0x59, 0x43, 0x4c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70,
  0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
  0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x33, 0x0a, 0x29, 0x0a, 0x7b, 0x0a,
  0x09, 0x2e, 0x72, 0x65, 0x67, 0x20, 0x2e, 0x62, 0x33, 0x32, 0x20, 0x09,
  0x25, 0x72, 0x3c, 0x31, 0x30, 0x3e, 0x3b, 0x0a, 0x09, 0x2e, 0x72, 0x65,
  0x67, 0x20, 0x2e, 0x62, 0x36, 0x34, 0x20, 0x09, 0x25, 0x72, 0x64, 0x3c,
  0x31, 0x30, 0x3e, 0x3b, 0x0a, 0x0a, 0x2f, 0x2f, 0x20, 0x25, 0x62, 0x62,
  0x2e, 0x30, 0x3a, 0x0a, 0x09, 0x6c, 0x64, 0x2e, 0x70, 0x61, 0x72, 0x61,
  0x6d, 0x2e, 0x75, 0x36, 0x34, 0x20, 0x09, 0x25, 0x72, 0x64, 0x31, 0x2c,
  0x20, 0x5b, 0x53, 0x59, 0x43, 0x4c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
  0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x69, 0x6d, 0x61, 0x67,
  0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x30, 0x5d, 0x3b, 0x0a,
  0x09, 0x6c, 0x64, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x75, 0x36,
  0x34, 0x20, 0x09, 0x25, 0x72, 0x64, 0x32, 0x2c, 0x20, 0x5b, 0x53, 0x59,
  0x43, 0x4c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69,
  0x6e, 0x74, 0x73, 0x32, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61,
  0x72, 0x61, 0x6d, 0x5f, 0x31, 0x5d, 0x3b, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
  0x2e, 0x75, 0x33, 0x32, 0x20, 0x09, 0x25, 0x72, 0x31, 0x2c, 0x20, 0x25,
  0x63, 0x74, 0x61, 0x69, 0x64, 0x2e, 0x78, 0x3b, 0x0a, 0x09, 0x6c, 0x64,
  0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x75, 0x36, 0x34, 0x20, 0x09,
  0x25, 0x72, 0x64, 0x33, 0x2c, 0x20, 0x5b, 0x53, 0x59, 0x43, 0x4c, 0x5f,
  0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
  0x32, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
  0x5f, 0x32, 0x5d, 0x3b, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x2e, 0x75, 0x33,
  0x32, 0x20, 0x09, 0x25, 0x72, 0x32, 0x2c, 0x20, 0x25, 0x6e, 0x74, 0x69,
  0x64, 0x2e, 0x78, 0x3b, 0x0a, 0x09, 0x6c, 0x64, 0x2e, 0x70, 0x61, 0x72,
  0x61, 0x6d, 0x2e, 0x75, 0x36, 0x34, 0x20, 0x09, 0x25, 0x72, 0x64, 0x34,
  0x2c, 0x20, 0x5b, 0x53, 0x59, 0x43, 0x4c, 0x5f, 0x63, 0x6c, 0x61, 0x73,
  0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x32, 0x69, 0x6d, 0x61,
  0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x33, 0x5d, 0x3b,
  0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x2e, 0x75, 0x33, 0x32, 0x20, 0x09, 0x25,
  0x72, 0x33, 0x2c, 0x20, 0x25, 0x74, 0x69, 0x64, 0x2e, 0x78, 0x3b, 0x0a,
  0x09, 0x6d, 0x61, 0x64, 0x2e, 0x6c, 0x6f, 0x2e, 0x73, 0x33, 0x32, 0x20,
  0x09, 0x25, 0x72, 0x34, 0x2c, 0x20, 0x25, 0x72, 0x32, 0x2c, 0x20, 0x25,
  0x72, 0x31, 0x2c, 0x20, 0x25, 0x72, 0x33, 0x3b, 0x0a, 0x09, 0x6d, 0x75,
  0x6c, 0x2e, 0x77, 0x69, 0x64, 0x65, 0x2e, 0x75, 0x33, 0x32, 0x20, 0x09,
  0x25, 0x72, 0x64, 0x35, 0x2c, 0x20, 0x25, 0x72, 0x34, 0x2c, 0x20, 0x34,
  0x3b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x2e, 0x73, 0x36, 0x34, 0x20, 0x09,
  0x25, 0x72, 0x64, 0x36, 0x2c, 0x20, 0x25, 0x72, 0x64, 0x32, 0x2c, 0x20,
  0x25, 0x72, 0x64, 0x35, 0x3b, 0x0a, 0x09, 0x6c, 0x64, 0x2e, 0x67, 0x6c,
  0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x75, 0x33, 0x32, 0x20, 0x09, 0x25, 0x72,
  0x35, 0x2c, 0x20, 0x5b, 0x25, 0x72, 0x64, 0x36, 0x5d, 0x3b, 0x0a, 0x09,
  0x61, 0x64, 0x64, 0x2e, 0x73, 0x36, 0x34, 0x20, 0x09, 0x25, 0x72, 0x64,
  0x37, 0x2c, 0x20, 0x25, 0x72, 0x64, 0x33, 0x2c, 0x20, 0x25, 0x72, 0x64,
  0x35, 0x3b, 0x0a, 0x09, 0x6c, 0x64, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61,
  0x6c, 0x2e, 0x75, 0x33, 0x32, 0x20, 0x09, 0x25, 0x72, 0x36, 0x2c, 0x20,
  0x5b, 0x25, 0x72, 0x64, 0x37, 0x5d, 0x3b, 0x0a, 0x09, 0x61, 0x64, 0x64,
  0x2e, 0x73, 0x33, 0x32, 0x20, 0x09, 0x25, 0x72, 0x37, 0x2c, 0x20, 0x25,
  0x72, 0x36, 0x2c, 0x20, 0x25, 0x72, 0x35, 0x3b, 0x0a, 0x09, 0x61, 0x64,
  0x64, 0x2e, 0x73, 0x36, 0x34, 0x20, 0x09, 0x25, 0x72, 0x64, 0x38, 0x2c,
  0x20, 0x25, 0x72, 0x64, 0x34, 0x2c, 0x20, 0x25, 0x72, 0x64, 0x35, 0x3b,
  0x0a, 0x09, 0x6c, 0x64, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
  0x75, 0x33, 0x32, 0x20, 0x09, 0x25, 0x72, 0x38, 0x2c, 0x20, 0x5b, 0x25,
  0x72, 0x64, 0x38, 0x5d, 0x3b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x2e, 0x73,
  0x33, 0x32, 0x20, 0x09, 0x25, 0x72, 0x39, 0x2c, 0x20, 0x25, 0x72, 0x37,
  0x2c, 0x20, 0x25, 0x72, 0x38, 0x3b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x2e,
  0x73, 0x36, 0x34, 0x20, 0x09, 0x25, 0x72, 0x64, 0x39, 0x2c, 0x20, 0x25,
  0x72, 0x64, 0x31, 0x2c, 0x20, 0x25, 0x72, 0x64, 0x35, 0x3b, 0x0a, 0x09,
  0x73, 0x74, 0x2e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x75, 0x33,
  0x32, 0x20, 0x09, 0x5b, 0x25, 0x72, 0x64, 0x39, 0x5d, 0x2c, 0x20, 0x25,
  0x72, 0x39, 0x3b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x3b, 0x0a, 0x7d, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x2f, 0x2f, 0x20, 0x2d, 0x2d, 0x20, 0x45, 0x6e,
  0x64, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x0a
};
const char *const SYCL_kernel_cpp_bin_nvptx64_features[] = {
  0
};
const kernel_binary_info SYCL_kernel_cpp_bin_nvptx64_info = {
  "nvptx64",
  64,
  SYCL_kernel_cpp_bin_nvptx64,
  sizeof(SYCL_kernel_cpp_bin_nvptx64),
  SYCL_kernel_cpp_bin_nvptx64_features
};

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
class points2image;

//
// SYCL kernel info for: ::points2image
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::points2image > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_binary_info *const bin_info[];

  static const std::array<field_descriptor, 4> fields;
  static const std::array<argument_descriptor, 16> arg_desc;

using type_id_4 = detail::host_arg_container; // opencl_mirror_convert device_arg_container
struct /* accessor_device_base */ type_id_3 {
  type_id_4 var_id_0; // m_deviceArgs
  };
struct /* accessor_common */ alignas(8) type_id_2 : type_id_3 {
  };
struct /* accessor */ alignas(8) type_id_1 : type_id_2 {
  };
using type_id_8 = detail::host_arg_container; // opencl_mirror_convert device_arg_container
struct /* accessor_device_base */ type_id_7 {
  type_id_8 var_id_0; // m_deviceArgs
  };
struct /* accessor_common */ alignas(8) type_id_6 : type_id_7 {
  };
struct /* accessor */ alignas(8) type_id_5 : type_id_6 {
  };
struct type_id_0 {
  type_id_1 var_id_0;
  type_id_5 var_id_1;
  type_id_5 var_id_2;
  type_id_5 var_id_3;
  };
using mirror_type_0 = type_id_0;

};
const std::array<field_descriptor, 4> kernel_info< ::points2image >::fields = {{
  { sizeof(mirror_type_0::var_id_0.var_id_0),
    offsetof(mirror_type_0, var_id_0.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    0 },
  { sizeof(mirror_type_0::var_id_1.var_id_0),
    offsetof(mirror_type_0, var_id_1.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    4 },
  { sizeof(mirror_type_0::var_id_2.var_id_0),
    offsetof(mirror_type_0, var_id_2.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    8 },
  { sizeof(mirror_type_0::var_id_3.var_id_0),
    offsetof(mirror_type_0, var_id_3.var_id_0),
    ::cl::sycl::detail::parameter_class::value,
    12 }
}};
const std::array<argument_descriptor, 16> kernel_info< ::points2image >::arg_desc = {{
  { static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer */,
    true /* __global int * */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer */,
    true /* __global int * */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer */,
    true /* __global int * */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(2) /* Pointer */,
    true /* __global int * */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ },
  { static_cast<::cl::sycl::detail::parameter_kind>(1) /* Normal */,
    false /* class cl::sycl::device_index_array */ }
}};
const char* kernel_info< ::points2image >::name = "SYCL_class_points2image";
const size_t kernel_info< ::points2image >::bin_count = 1;
const kernel_binary_info *const kernel_info< ::points2image >::bin_info[] = {
  &SYCL_kernel_cpp_bin_nvptx64_info,
  0
};

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
#endif // CODEPLAY_SYCL_kernel_cpp_STUB
